<?php
/* vim: set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4: */
/**
 * Ranking2chWatcherTest
 * PHPUnit用のテストクラス
 * curlを使用しているためネットワークが使えなかったり、
 * 相手サーバの状況によってはテストが失敗することがある
 *
 * @package		Ranking2chWatcher
 * @author		松井 健太郎 (Kentaro Matsui) <info@ke-tai.org>
 * @copyright	ke-tai.org
 * @license		BSD
 * @see			http://2ch-ranking.net/api.html
 **/

define('DEBUG_MODE', true);		// デバッグ情報を出力するか
define('TEST_MODE', true);		// テストクラスからの実行


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-24 at 16:07:04.
 */
class Ranking2chWatcherTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var Ranking2chWatcher
	 */
	protected $object;
	protected $thread_list;
	protected $tmp_file;
	protected $dummy_time = 1234567890;
	protected $dummy_value = 99999;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		chdir(dirname(__FILE__));
		require_once '../Ranking2chWatcher.php';
		$this->object = new Ranking2chWatcher;

		// ダミーの応答文字列を読み込み
		$this->thread_list = file_get_contents('data/sample_thread_list.json');

		// テンポラリファイル名を決定
		$this->tmp_file = strtr(TMP_FILE, array('%%HASH%%' => __CLASS__));
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->removeTestTmpFile();
	}

	/**
	 * @covers Ranking2chWatcher::run
	 */
	public function testRun()
	{
		ob_start();
		$ret = $this->object->run();
		$output = ob_get_contents();
		ob_end_clean();
		$this->assertNull($ret);
		$this->assertNotNull($output);
		$this->assertNotEmpty($output);
	}

	/**
	 * @covers Ranking2chWatcher::getThreadList
	 */
	public function testGetThreadList()
	{
		$ref = new ReflectionMethod($this->object, ucwords(substr(__FUNCTION__, 4)));
		$ref->setAccessible(true);
		$thread_list = $ref->invoke($this->object, 0);
		if (is_null($thread_list)) {
			// 304でデータが取得できなかった場合
			$this->assertNull($thread_list);
		} else {
			// スレッドデータが取得できた場合
			$this->thread_list = $thread_list;
			$this->assertNotNull($thread_list);
			$this->assertNotEmpty($thread_list);
			$this->assertFalse(!json_decode($thread_list));
		}
	}

	/**
	 * @covers Ranking2chWatcher::getForces
	 */
	public function testGetForces()
	{
		// キーワードにマッチする場合
		$ref = new ReflectionMethod($this->object, ucwords(substr(__FUNCTION__, 4)));
		$ref->setAccessible(true);
		$ret_match = $ref->invoke($this->object, $this->thread_list, '/.*/');
		$this->assertNotNull($ret_match);
		$this->assertNotEmpty($ret_match);
		$this->assertRegExp('/^[0-9]+$/', $ret_match);
		
		// キーワードにマッチしない
		$ret_no_match = $ref->invoke($this->object, $this->thread_list, '/^$/');
		$this->assertNotNull($ret_no_match);
		$this->assertEquals(0, $ret_no_match);
	}

	/**
	 * テストから呼ばれるテンポラリファイル作成メソッド
	 * @return bool putTmpFileの戻り値
	 */
	public function makeTestTmpFile()
	{
		$file_data = json_decode('');
		$file_data->time = $this->dummy_time;
		$file_data->value = $this->dummy_value;

		$ref = new ReflectionMethod($this->object, 'putTmpFile');
		$ref->setAccessible(true);
		$ret = $ref->invoke($this->object, $this->tmp_file, json_encode($file_data));

		return $ret;
	}

	/**
	 * テストから呼ばれるテンポラリファイル削除メソッド
	 */
	public function removeTestTmpFile()
	{
		if (file_exists($this->tmp_file)) {
			unlink($this->tmp_file);
		}
	}

	/**
	 * @covers Ranking2chWatcher::putTmpFile
	 */
	public function testPutTmpFile()
	{
		// 新規作成
		$this->removeTestTmpFile();
		$ret = $this->makeTestTmpFile();
		$this->assertTrue($ret);
		$this->assertTrue(file_exists($this->tmp_file));

		// 上書き
		$ret = $this->makeTestTmpFile();
		$this->assertTrue($ret);
		$this->assertTrue(file_exists($this->tmp_file));
	}

	/**
	 * @covers Ranking2chWatcher::readTmpFile
	 */
	public function testReadTmpFile()
	{
		// テストに必要なテンポラリファイルの作成
		$this->removeTestTmpFile();
		$ret = $this->makeTestTmpFile();
		$this->assertTrue($ret);
		$this->assertTrue(file_exists($this->tmp_file));

		$ref = new ReflectionMethod($this->object, ucwords(substr(__FUNCTION__, 4)));
		$ref->setAccessible(true);
		$file_data = $ref->invoke($this->object, $this->tmp_file);

		// ファイルが存在するときの挙動テスト
		$this->assertTrue(file_exists($this->tmp_file));
		$this->assertNotNull($file_data);
		$this->assertNotEmpty($file_data);
		$this->assertEquals($file_data->time, $this->dummy_time);
		$this->assertEquals($file_data->value, $this->dummy_value);

		// ファイルが存在しない場合の挙動テスト
		$this->removeTestTmpFile();
		$this->assertFalse(file_exists($this->tmp_file));
		$file_data_del = $ref->invoke($this->object, $this->tmp_file);
		$this->assertNull($file_data_del);
	}
}
